import React, { useState } from 'react';
import { Container, Typography, AppBar, Toolbar, Button, Snackbar, Alert } from '@mui/material';
import PostList from './components/PostList';
import UserList from './components/UserList';
import useFetchData from './hooks/useFetchData';
import axios from 'axios';
import LoginRegister from './components/LoginRegister'; // Import the new combined component

const API_BASE_URL = 'http://localhost:8080/api';

function App() {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);
  const [newPost, setNewPost] = useState('');
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'info' });
  const [users, setUsers] = useState([]);
  const [followedUsers, setFollowedUsers] = useState([]);

  useFetchData(setUser, setPosts, setUsers, setFollowedUsers, setSnackbar);

  const handleLogout = async () => {
    try {
      await axios.post(`${API_BASE_URL}/signout`, {}, { withCredentials: true });
      setUser(null);
      setPosts([]);
      setUsers([]);
      setFollowedUsers([]);
      setSnackbar({ open: true, message: 'Logged out successfully', severity: 'success' });
    } catch (error) {
      setSnackbar({ open: true, message: 'Logout failed', severity: 'error' });
      console.error('Logout error:', error);
    }
  };

  const handleFollowUser = async (usernameId) => {
    const isFollowing = followedUsers.some(f => f.id === usernameId);
    const apiUrl = isFollowing
      ? `${API_BASE_URL}/user/unfollow/${usernameId}`
      : `${API_BASE_URL}/user/follow/${usernameId}`;

    try {
      await axios.post(apiUrl, {}, { withCredentials: true });
      const message = isFollowing ? `Unfollowed user ${usernameId}` : `Followed user ${usernameId}`;
      setSnackbar({ open: true, message, severity: 'success' });

      // Update followed users
      const updatedFollowedUsersResponse = await axios.get(`${API_BASE_URL}/user/list-followed-users`, { withCredentials: true });
      setFollowedUsers(updatedFollowedUsersResponse.data);

      // Update user list
      const usersResponse = await axios.get(`${API_BASE_URL}/user/list-all-users`, { withCredentials: true });
      const allUsers = usersResponse.data;
      const filteredUsers = allUsers.filter(u => u.id !== user.id);
      const sortedUsers = [
        ...updatedFollowedUsersResponse.data,
        ...filteredUsers.filter(u => !updatedFollowedUsersResponse.data.some(f => f.id === u.id)),
      ];
      setUsers(sortedUsers);

      // Update posts
      const postsResponse = await axios.get(`${API_BASE_URL}/post/list-all-posts`, { withCredentials: true });
      setPosts(postsResponse.data);
    } catch (error) {
      setSnackbar({ open: true, message: `Error ${isFollowing ? 'unfollowing' : 'following'} user`, severity: 'error' });
      console.error(`Error ${isFollowing ? 'unfollowing' : 'following'} user:`, error);
    }
  };

  return (
    <div>
      <AppBar position="static">
        <Toolbar>
          <Typography variant="h6" style={{ flexGrow: 1 }}>
            Simple Social Network web
          </Typography>
          {user ? (
            <>
              <Typography variant="body1" style={{ marginRight: '16px' }}>
                Welcome, {user.username}
              </Typography>
              <Button color="inherit" onClick={handleLogout}>Logout</Button>
            </>
          ) : null}
        </Toolbar>
      </AppBar>
      {user ? (
        <Container style={{ display: 'flex', flexDirection: 'row', marginTop: '20px' }}>
          <PostList
            posts={posts}
            newPost={newPost}
            setNewPost={setNewPost}
            setPosts={setPosts}
            setSnackbar={setSnackbar}
            user={user}
          />
          <UserList
            users={users}
            followedUsers={followedUsers}
            handleFollowUser={(usernameId) => handleFollowUser(usernameId)}
          />
        </Container>
      ) : (
        <LoginRegister setSnackbar={setSnackbar} setUser={setUser} />
      )}
      <Snackbar open={snackbar.open} autoHideDuration={6000} onClose={() => setSnackbar({ ...snackbar, open: false })}>
        <Alert onClose={() => setSnackbar({ ...snackbar, open: false })} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </div>
  );
}

export default App;
