import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  Container,
  Typography,
  TextField,
  Button,
  AppBar,
  Toolbar,
  Snackbar,
  Alert,
  Paper,
  Box,
  List,
  ListItem,
  ListItemText,
  Avatar,
  IconButton,
} from '@mui/material';
import { styled } from '@mui/system';
import DeleteIcon from '@mui/icons-material/Delete';
import CancelIcon from '@mui/icons-material/Cancel';

const API_BASE_URL = 'http://localhost:8080/api';

// Function to safely decode URI components
const safeDecodeURIComponent = (text) => {
  try {
    return decodeURIComponent(text.replace(/\+/g, ' '));
  } catch (e) {
    console.error('Decoding error:', e);
    return text;
  }
};

// Function to clean unwanted characters from post content and comments
const cleanContent = (text) => {
  return text.replace(/=\s*$/, ''); // Removes any trailing '=' characters
};

// Function to get the capitalized first letter of the username
const getAvatarLetter = (username) => {
  return username.charAt(0).toUpperCase();
};

// Styled ListItem component with hover effect
const StyledListItem = styled(ListItem)({
  paddingBottom: '16px',
  cursor: 'pointer',
  transition: 'background-color 0.3s',
  '&:hover': {
    backgroundColor: '#e0e0e0',
  },
});

// Styled Avatar components
const FollowedAvatar = styled(Avatar)({
  marginRight: '16px',
  backgroundColor: '#1976D2',
});

const DefaultAvatar = styled(Avatar)({
  marginRight: '16px',
  backgroundColor: 'grey',
});

function App() {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]); // Initialize as an empty array
  const [newPost, setNewPost] = useState('');
  const [image, setImage] = useState(null);
  const [imagePreview, setImagePreview] = useState(null); // New state for image preview
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'info' });
  const [users, setUsers] = useState([]);
  const [followedUsers, setFollowedUsers] = useState([]);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const postsResponse = await axios.get(`${API_BASE_URL}/post/list-all-posts`, { withCredentials: true });
        const postsWithImages = await Promise.all(postsResponse.data.map(async (post) => {
          const decodedPost = safeDecodeURIComponent(post.post);
          const cleanedPost = cleanContent(decodedPost);

          let imageUrl = null;
          if (post.image_name) {
            const imageResponse = await axios.get(`${API_BASE_URL}/post/image/${post.image_name}`, {
              responseType: 'arraybuffer',
              withCredentials: true, // Include credentials in the request
            });
            const imageBlob = new Blob([imageResponse.data], { type: 'image/png' });
            imageUrl = URL.createObjectURL(imageBlob);
          }

          const commentsResponse = await axios.get(`${API_BASE_URL}/post/post-details/${post.post_id}`, { withCredentials: true });
          const comments = commentsResponse.data.comments.map(comment => ({
            ...comment,
            comment: cleanContent(safeDecodeURIComponent(comment.comment)),
          }));

          return {
            ...post,
            post: cleanedPost,
            imageUrl: imageUrl,
            comments: comments,
          };
        }));
        setPosts(postsWithImages);
      } catch (error) {
        setSnackbar({ open: true, message: 'Error fetching posts', severity: 'error' });
        console.error('Error fetching posts:', error);
      }
    };

    const checkLoginAndFetchData = async () => {
      try {
        const userResponse = await axios.get(`${API_BASE_URL}/whoami`, { withCredentials: true });
        setUser(userResponse.data);

        if (userResponse.data) {
          fetchPosts();

          const usersResponse = await axios.get(`${API_BASE_URL}/user/list-all-users`, { withCredentials: true });
          const allUsers = usersResponse.data;

          const followedUsersResponse = await axios.get(`${API_BASE_URL}/user/list-followed-users`, { withCredentials: true });
          setFollowedUsers(followedUsersResponse.data);

          // Place followed users at the top of the user list
          const filteredUsers = allUsers.filter(u => u.id !== userResponse.data.id);
          const sortedUsers = [
            ...followedUsersResponse.data,
            ...filteredUsers.filter(u => !followedUsersResponse.data.some(f => f.id === u.id)),
          ];
          setUsers(sortedUsers);
        }
      } catch (error) {
        setSnackbar({ open: true, message: 'Error fetching data', severity: 'error' });
        console.error('Error fetching data:', error);
      }
    };

    checkLoginAndFetchData();
  }, []);

  const handleLogin = async () => {
    try {
      await axios.post(`${API_BASE_URL}/signin`, { username, password }, { withCredentials: true });
      window.location.reload();
    } catch (error) {
      setSnackbar({ open: true, message: 'Login failed', severity: 'error' });
      console.error('Login error:', error);
    }
  };

  const handleRegister = async () => {
    try {
      await axios.post(`${API_BASE_URL}/signup`, { username, password }, { withCredentials: true });
      setSnackbar({ open: true, message: 'Registration successful! Please log in.', severity: 'success' });
    } catch (error) {
      setSnackbar({ open: true, message: 'Registration failed', severity: 'error' });
      console.error('Registration error:', error);
    }
  };

  const handleLogout = async () => {
    try {
      await axios.post(`${API_BASE_URL}/signout`, {}, { withCredentials: true });
      setUser(null);
      setPosts([]);
      setUsers([]);
      setFollowedUsers([]);
      setSnackbar({ open: true, message: 'Logged out successfully', severity: 'success' });
    } catch (error) {
      setSnackbar({ open: true, message: 'Logout failed', severity: 'error' });
      console.error('Logout error:', error);
    }
  };

  const handlePost = async () => {
    try {
      const formData = new FormData();
      formData.append('post', newPost);
      if (image) {
        formData.append('image', image);
      }

      await axios.post(`${API_BASE_URL}/post/add`, formData, {
        withCredentials: true,
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      setNewPost('');
      setImage(null);
      setImagePreview(null); // Clear the preview after posting

      // Refresh the posts after successful submission
      const postsResponse = await axios.get(`${API_BASE_URL}/post/list-all-posts`, { withCredentials: true });
      const postsWithImages = await Promise.all(postsResponse.data.map(async (post) => {
        const decodedPost = safeDecodeURIComponent(post.post);
        const cleanedPost = cleanContent(decodedPost);

        let imageUrl = null;
        if (post.image_name) {
          const imageResponse = await axios.get(`${API_BASE_URL}/post/image/${post.image_name}`, {
            responseType: 'arraybuffer',
            withCredentials: true, // Include credentials in the request
          });
          const imageBlob = new Blob([imageResponse.data], { type: 'image/png' });
          imageUrl = URL.createObjectURL(imageBlob);
        }

        const commentsResponse = await axios.get(`${API_BASE_URL}/post/post-details/${post.post_id}`, { withCredentials: true });
        const comments = commentsResponse.data.comments.map(comment => ({
          ...comment,
          comment: cleanContent(safeDecodeURIComponent(comment.comment)),
        }));

        return {
          ...post,
          post: cleanedPost,
          imageUrl: imageUrl,
          comments: comments,
        };
      }));
      setPosts(postsWithImages);

      setSnackbar({ open: true, message: 'Post added successfully', severity: 'success' });
    } catch (error) {
      setSnackbar({ open: true, message: 'Error adding post', severity: 'error' });
      console.error('Error adding post:', error);
    }
  };

  const handleFollowUser = async (usernameId) => {
    const isFollowing = followedUsers.some(f => f.id === usernameId);
    const apiUrl = isFollowing
      ? `${API_BASE_URL}/user/unfollow/${usernameId}`
      : `${API_BASE_URL}/user/follow/${usernameId}`;

    try {
      await axios.post(apiUrl, {}, { withCredentials: true });
      const updatedFollowedUsers = isFollowing
        ? followedUsers.filter(f => f.id !== usernameId)
        : [...followedUsers, { id: usernameId }];
      setFollowedUsers(updatedFollowedUsers);
    } catch (error) {
      setSnackbar({ open: true, message: isFollowing ? 'Unfollow failed' : 'Follow failed', severity: 'error' });
      console.error(isFollowing ? 'Unfollow error:' : 'Follow error:', error);
    }
  };

  const handleDeletePost = async (postId) => {
    try {
      await axios.delete(`${API_BASE_URL}/post/delete/${postId}`, { withCredentials: true });
      setPosts(posts.filter((post) => post.post_id !== postId));
      setSnackbar({ open: true, message: 'Post deleted successfully', severity: 'success' });
    } catch (error) {
      setSnackbar({ open: true, message: 'Error deleting post', severity: 'error' });
      console.error('Error deleting post:', error);
    }
  };

  const handleImageChange = (event) => {
    const file = event.target.files[0];
    setImage(file);

    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result);
      };
      reader.readAsDataURL(file);
    } else {
      setImagePreview(null);
    }
  };

  const handleImageCancel = () => {
    setImage(null);
    setImagePreview(null);
  };

  return (
    <Container>
      <AppBar position="static">
        <Toolbar>
          <Typography variant="h6" style={{ flexGrow: 1 }}>
            Social Network
          </Typography>
          {user ? (
            <>
              <Typography variant="h6" style={{ marginRight: '16px' }}>
                Welcome, {user.username}
              </Typography>
              <Button color="inherit" onClick={handleLogout}>
                Logout
              </Button>
            </>
          ) : (
            <>
              <TextField
                label="Username"
                variant="outlined"
                size="small"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                style={{ marginRight: '8px' }}
              />
              <TextField
                label="Password"
                type="password"
                variant="outlined"
                size="small"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                style={{ marginRight: '8px' }}
              />
              <Button color="inherit" onClick={handleLogin}>
                Login
              </Button>
              <Button color="inherit" onClick={handleRegister}>
                Register
              </Button>
            </>
          )}
        </Toolbar>
      </AppBar>

      {user && (
        <>
          <Box marginY={2}>
            <Paper elevation={3} style={{ padding: '16px' }}>
              <Typography variant="h6">Create a Post</Typography>
              <TextField
                label="What's on your mind?"
                variant="outlined"
                fullWidth
                multiline
                rows={1}
                value={newPost}
                onChange={(e) => setNewPost(e.target.value)}
                style={{ marginBottom: '16px' }}
              />
              {imagePreview && (
                <Box marginTop={1} marginBottom={1} position="relative" display="inline-block">
                  <img
                    src={imagePreview}
                    alt="Preview"
                    style={{ maxWidth: '100%', maxHeight: '200px', objectFit: 'contain' }}
                  />
                  <IconButton
                    onClick={handleImageCancel}
                    style={{ position: 'absolute', top: 0, right: 0 }}
                  >
                    <CancelIcon />
                  </IconButton>
				  
                </Box>
              )}
			  <div></div>
              <input
                accept="image/*"
                style={{ display: 'none' }}
                id="upload-image"
                type="file"
                onChange={handleImageChange}
              />
              <label htmlFor="upload-image">
                <Button variant="contained" component="span" style={{ marginRight: '16px' }}>
                  Upload Image
                </Button>
              </label>
              <Button variant="contained" color="primary" onClick={handlePost}>
                Post
              </Button>
            </Paper>
          </Box>

          <Box marginY={2}>
            <Typography variant="h6">Users</Typography>
            <List>
              {users.map((user) => (
                <StyledListItem
                  key={user.id}
                  button
                  onClick={() => handleFollowUser(user.id)}
                  style={{
                    display: 'flex',
                    justifyContent: 'space-between',
                  }}
                >
                  <Box display="flex" alignItems="center">
                    {followedUsers.some((f) => f.id === user.id) ? (
                      <FollowedAvatar>{getAvatarLetter(user.username)}</FollowedAvatar>
                    ) : (
                      <DefaultAvatar>{getAvatarLetter(user.username)}</DefaultAvatar>
                    )}
                    <ListItemText primary={user.username} />
                  </Box>
                  <Button
                    variant="contained"
                    color={followedUsers.some((f) => f.id === user.id) ? 'secondary' : 'primary'}
                  >
                    {followedUsers.some((f) => f.id === user.id) ? 'Unfollow' : 'Follow'}
                  </Button>
                </StyledListItem>
              ))}
            </List>
          </Box>

          <Box marginY={2}>
            <Typography variant="h6">Posts</Typography>
            {posts.length === 0 ? (
              <Typography>No posts available</Typography>
            ) : (
              posts.map((post) => (
                <Paper key={post.post_id} elevation={3} style={{ padding: '16px', marginBottom: '16px' }}>
                  <Box display="flex" justifyContent="space-between">
                    <Typography variant="body1">{post.post}</Typography>
                    {user.id === post.user_id && (
                      <IconButton edge="end" aria-label="delete" onClick={() => handleDeletePost(post.post_id)}>
                        <DeleteIcon />
                      </IconButton>
                    )}
                  </Box>
                  {post.imageUrl && (
                    <img
                      src={post.imageUrl}
                      alt="Post"
                      style={{ marginTop: '16px', maxWidth: '100%', maxHeight: '200px', objectFit: 'contain' }}
                    />
                  )}
                  <Typography variant="body2" color="textSecondary">
                    - {post.username}
                  </Typography>
                  <Box marginTop={2}>
                    <Typography variant="body2">Comments:</Typography>
                    {post.comments.length === 0 ? (
                      <Typography variant="body2" color="textSecondary">
                        No comments
                      </Typography>
                    ) : (
                      post.comments.map((comment) => (
                        <Box key={comment.comment_id} marginTop={1}>
                          <Typography variant="body2">{comment.comment}</Typography>
                          <Typography variant="body2" color="textSecondary">
                            - {comment.username}
                          </Typography>
                        </Box>
                      ))
                    )}
                  </Box>
                </Paper>
              ))
            )}
          </Box>
        </>
      )}

      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert onClose={() => setSnackbar({ ...snackbar, open: false })} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
}

export default App;
